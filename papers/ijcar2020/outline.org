* Introduction 
** The Coq system in broad strokes
  - The trusted base of Coq is its kernel and uses a certain kind of
    dependently typed $\lambda$-term as input.
  - The rest of the Coq system, especially its tactic language, is
    designed to help a human user build proofs-cum-$\lambda$-terms that
    can be checked by the kernel.

** The problem of external provers

  - there are many other kinds of theorem provers for intuitionistic
    logic for which a completed proof is not even closely related to
    the $\lambda$-terms required by the Coq kernel

  - Proof evidence from these other provers records only some key
    aspects of a proof.  Lots of details might be missing.  For
    example: 
    - substitution instances of quantifiers  
    - all the small steps of rewriting that might have been applied 

** FPC-Coq system can bridging the gap in powerful and flexible ways

  The key components our this system are the following.

  - The Coq kernel.  The goal is to ultimately give the Coq kernel a
    proof that it checks.  This kernel is the only member of our
    trusted code base.

  - The ELPI plugin to Coq.  This provides the logic programming
    (specifically, lambda Prolog) environment within the Coq system.

  - The FPC framework which contains lambda Prolog code that
    implements
    - a logic programming based kernel for a (focused) sequent
      calculus for first-order intuitionistic logic.
    - Various FPC definitions for a range of client (external) theorem
      provers. 
    - The FPC definition for a natural deduction proof system that
      directly encodes the proof structures needed by Coq.
    - The pairing FPC.



* Section 2: FPC described

  - General architecture
    - certificate-as-term
    - indexes
    - clerks and experts

    Focused proof systems.  This allows for the following protocol.
    - during the invertible phase, straightforward computations are done
      in building a proof (deterministic application of invertible
      rules) during which only bookkeeping information flows from the
      proof certificate to the kernel (moderated by clerk predicates).
    - during the non-invertible phase, the certificate is treated as
      an oracle with the expectation that key information about the
      development of the proof flows from the certificate to the
      kernel (moderated by expert predicates).

  - Example of FPCs
    - Interaction: outlines
    - Decide depth

  - The Pairing FPC

  - The FPC for checking/building Coq kernel terms.

* Overview the processing steps need to convert an external proof to Coq proof

  The logic programming language provides sound and flexible access to
  unification and backtracking search.

  When the sequent calculus based kernel in lambda Prolog is checking
  external proof evidence (formally defined using an FPC), that kernel
  must general all the details needed to steer that kernel through a
  fully detailed proof.

  By using the pairing FPC, we can essentially do two simultaneous
  proof checking at the same time.  Using the magic of logic
  programming, proof checking can also be proof reconstruction: in
  this way, the second parallel proof checking can be of a proof
  structure that incorporates all proof details.

  Finally, that fully detailed sequent calculus proof can be
  reorganized as a natural deduction proof object appropriate for the
  Coq kernel.

* Contrast with Dedukti

  There is a major effort taking place in which several proof
  assistants are being provided back-ends that export their proofs
  using the Dedukti format.

  The Dedukti kernel checker becomes a new, independent kernel that
  one must trust.   The design of Dedukti is, however, high-level and
  declarative so it has a careful specification, allows skeptics to
  implement their Dedukti kernels.

  Presumably, the techniques and technology described there could be
  used to generate formal proofs in the Dedukti style instead of the
  Coq style. 


* Examples
  - de Briujn terms as proofs (not too exciting since these are nearly
    lambda-terms anyway).
  - Justified Horn clauses (? from JAR paper).
  - Special purpose FPC: proof evidence that a node is reachable from
    another node is a list of nodes (the FPC mechanism can translate
    this to a detailed sequent and natural deduction proof)
  - Since LKF can be hosted on LJF, all classical proof evidence can
    be used to prove some "double negated" version of the classical
    theorem. 

* A new logic refinement language for Coq

  We propose to extend this work by letting the external prover be a
  human user.  That human could propose a proof certificate for
  checking that could be simply a "proof outline" or the statement
  that a proof of a specific (small) height or size: non-deterministic
  search of all small proofs could then be done by the lambda Prolog
  system and a successful proof would then be submitted to the Coq
  kernel.

* Related work
  - Dedukti
  - LTac
  - SSReflect designed to provide support for "small scale reflection
    proof methodology" 

