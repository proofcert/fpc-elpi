

Kind    tm, ty, const, id          type.


Type    zero,one              const.
Type    con               const -> tm.
Type    app                    tm -> tm -> tm.
Type    fun                    (tm -> tm) -> tm.
Type    i               ty.

% usual CBN rules, but coinductively
CoDefine coeval: tm -> tm -> prop by
     coeval (con C) (con C);
     coeval (fun R) (fun R);
     coeval (app M N) V := exists R W, coeval M (fun R) /\
                        coeval N W /\ coeval (R W) V.

Theorem fail_det: exists E V1 V2, coeval E V1 /\ coeval E V2 /\ (V1 = V2 -> false).
exists (app (fun (x1\app x1 x1)) (fun (x1\app x1 x1))).
exists (con zero).
exists (con one).
split.
coinduction. search.
coinduction. search.
intros. case H1. 