Call Of April 21, 2020

- In the PPDP19 paper we considered only ONE bipole.

In particular, assume that A and A' are purely positive expressions. Then:
 checking (via Prolog-like computation)      |- A   (sync phase only)
 negation-as-failure:                      A |-     (async phase only)
 generate and test:                        A |- A'  (async generates, sync tests)

The later is a single bipole.

- In the paper with Quentin "Framework for ... finite exploration"
  there were multiple, nested bipole, see a proof of similarity of two
  processes (section 5.1, Fig 5 where two non terminating LTS are
  shown bisimilar with a certificate that turns the bipoles into a
  simulation).  However, there was NO use of cycles. In fact muF has
  full (co)induction rules (in addition to unfoldings) but NO init
  rule.

- What is new to the current paper on PBT: we need to deal with
  multiple bipole (for simulation) *and* cycles (for cyclic reasoning:
  example is coevaluation). 

This means extending muF with *some* init rule. Note thal muMALL has
init for atoms or fixed point (the general rule is admissible, prop
2.8 in David's TOCL). We do not have atoms here.

==> reconsider the notion of switchable for muF + init

==> reconsider the relationship between a Horn spec seen as a positive
mu and its negation as a negative nu.  Dale added the file
pbt/coLP/code/abella/even-odd.thm in which some purely negative
alternative to purely positive specifications are tested.



--------------------------------
Call Of Nov 21, 2019

- "Theory":

  -- Bedwyr's tables are only (equivariant) atoms, do not contains
     quantified variables, nor more complex propositional structure

  -- Better understand the apparent non-role of contraction in the
     proof theory of model checking. what about weakening? Are we
     talking affine?

  -- Spell out formally the relationship between tables and invariants

  -- A certificate for non-similarity in LTS is basically a HM formula where
     the modality dictates the positive choices

  -- HM logic for (applicative) similarity in the l-calculus and
     relationships with theory equivalence. Collapse of the
     modalities.

- Implementation

  -- FPC for generation only in Bedwyr

  -- Simplification (when we know what we're talking about) of Quentin's FPC

  -- Stick to CCS examples (and some lambda calculus), then, if
     successful, move to the pi-calculus

  -- Do not worry too much about the competition (model-checking for
     the mu-calculus etc)
